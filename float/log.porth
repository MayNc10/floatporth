include "fcore.porth"
include "arith.porth"
include "exp.porth"

const e 1076754516 end

proc fln int -- int in
    dup 0 f= if //check if 0
        drop -inf 
    else
        //from https://en.wikipedia.org/wiki/Logarithm#Power_series
        dup reduceToExp
        swap 0 setExp
        1065353216 fSub dup 1073741824 fAdd fDiv //consts are 1 and 2, respectively. e m-1/m+1 //fDiv gives slight rounding errors
        let m in
            m 3 fPowI
            1051372203 fMul //1/3
            m 5 fPowIEBS //TODO: confirm that EBS is faster here
            1045220557 fMul //1/5
            fAdd
            m fAdd
        end
        1073741824 fMul
        swap //ln(m) e
        tofloat 1060205080 fMul //ln(m) ln(2^e)
        fAdd
    end
end

proc flog2 int -- int in
    dup 0 f= if //check if 0
        drop -inf 
    else
        //from https://en.wikipedia.org/wiki/Logarithm#Power_series
        dup reduceToExp
        swap 0 setExp
        1065353216 fSub dup 1073741824 fAdd fDiv //consts are 1 and 2, respectively. e m-1/m+1 //fDiv gives slight rounding errors
        let m in
            m 3 fPowI
            1051372203 fMul //1/3
            m 5 fPowIEBS //TODO: confirm that EBS is faster here
            1045220557 fMul //1/5
            fAdd
            m fAdd
        end
        1077455419 fMul // multiply by 2/ln(2), combining the multiply at the end of ln(x) with the division by ln(2) to convert to log2
        swap //log2(m) e
        tofloat //log2(m) log2(e)
        fAdd
    end
end

//Because flog2 uses less multiplications, I'm asusming it's more accurate and faster, and so I'm using it here. We should confirm this though
proc flog int int -- int in //Base x
    flog2 swap flog2 fDiv
end